
import process;
import sys;
namespace CPU;

GetProcessTimes = ::Kernel32.api("GetProcessTimes"
    ,"bool(pointer hProcess, LONG& lpCreationTime, LONG& lpExitTime, LONG& lpKernelTime, LONG& lpUserTime)" )
   
GetSystemTimes = ::Kernel32.api("GetSystemTimes"
    ,"bool(LONG& lpIdleTime, LONG& lpKernelTime, LONG& lpUserTime)" )

getPrcsCpuLoading = function(hPrcs, delay=1000) begin
    var cpuTms = {}
    var coreNum = sys.info().dwNumberOfProcessors
    for(i=1;2;1){
        var ret,creationTime, exitTime, kernelTime, userTime = GetProcessTimes(hPrcs, 0, 0, 0, 0)
        if(!ret) return false;
        cpuTms[ i ] = (kernelTime + userTime)/10000/coreNum  
        sleep(delay)
    }
   
    return (cpuTms[2] - cpuTms[1]) / delay * 100;   
end;

getCpuLoading = function(delay=1000) begin
    var cpuTms = {}
    var coreNum = sys.info().dwNumberOfProcessors
    for(i=1;2;1){
        var ret,idleTime, kernelTime, userTime = GetSystemTimes(0, 0, 0)
        if(!ret) return false;
        
        cpuTms[ i ] =  (idleTime + userTime - idleTime)/10000/coreNum  
        sleep(delay)
    }
   
    return (cpuTms[2] - cpuTms[1]) / delay * 100;   
end;



